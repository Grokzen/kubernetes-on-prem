#!/bin/bash

# Globally declared vars
readonly K8S_COMPONENTS="../components"

function check_dependecies() {
command -v sshpass >/dev/null 2>&1 || {
 echo >&2 "sshpass is required but it's not installed. Aborting.";
exit 1;
 }
command -v kubectl >/dev/null 2>&1 || {
 echo >&2 "kubectl is required but it's not installed. Aborting.";
exit 1;
 }
}
function get_kube_config() {
local KUBECFG="${HOME}/.kube/config"
[[ -f ${KUBECFG} ]] && {
 echo -e "\033[1;34mMaking backup of your KUBE config...\033[0m";
cp ${KUBECFG} ${KUBECFG}.on-prem.bkp;
}
local PORT=$(vagrant ssh-config master | grep -v Host | tr -s ' ' | cut -d ' ' -f3 | grep ^[0-9])
sshpass -p "kubeadmin" scp -P ${PORT} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@127.0.0.1:/etc/kubernetes/admin.conf ${KUBECFG}
}
function verify_if_cluster_is_running() {
local is_running=$(kubectl cluster-info 2> /dev/null | head -1 | awk '{print $3, $4}')
[[ ${is_running} != "is running" ]] && {
 echo "Something went wrong, cluster is not running. Aborting.";
exit 1;
 }
}
function configure_ingress() {
local K8S_INGRESS_OBJECTS=(ns-and-sa.yaml default-server-secret.yaml ingress-configmap.yaml ingress-rbac.yaml ingress-controller-daemonset.yaml ingress-svc.yaml)
echo -e "\033[1;34mDeploying Ingress Controller ...\033[0m"
for KUBE in "${K8S_INGRESS_OBJECTS[@]}"
 do kubectl create -f ${K8S_COMPONENTS}/ingress-controller/${KUBE}
done
}
function configure_nfs_provisioner() {
local K8S_STORAGECLASS_OBJECTS=(class.yaml deployment.yaml rbac.yaml)
echo -e "\033[1;34mDeploying Storage class and Dynamic NFS Provisioner ...\033[0m"
for KUBE in "${K8S_STORAGECLASS_OBJECTS[@]}"
 do kubectl create -f ${K8S_COMPONENTS}/nfs-provisioner/${KUBE}
done
}
function configure_metrics_server() {
local K8S_METRICS_OBJECTS=(aggregated-metrics-reader.yaml auth-reader.yaml metrics-server-deployment.yaml resource-reader.yaml auth-delegator.yaml metrics-apiservice.yaml metrics-server-service.yaml)
echo -e "\033[1;34mDeploying Metrics Server ...\033[0m"
for KUBE in "${K8S_METRICS_OBJECTS[@]}"
 do kubectl create -f ${K8S_COMPONENTS}/metrics-server/${KUBE}
done
}
function configure_tiller() {
echo -e "\033[1;34mInitializing Tiller for Helm ...\033[0m"
kubectl create -f ${K8S_COMPONENTS}/helm/helm-sa.yaml
helm init --service-account tiller
}
function rename_context() {
echo -e "\n\033[1;34mRename and switch context ...\033[0m"
kubectl config rename-context kubernetes-admin@kubernetes kubernetes
kubectl config use-context kubernetes
}

function main() {
  check_dependecies
  get_kube_config
  verify_if_cluster_is_running
  configure_ingress
  configure_nfs_provisioner
  configure_metrics_server
  configure_tiller
  rename_context
}

main
